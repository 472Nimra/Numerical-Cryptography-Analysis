# -*- coding: utf-8 -*-
"""Numerical Cryptography Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1otA7Ugrf6_0WDPCpG5WBUI2SAQqv1k8M
"""

import string
from collections import Counter

# Caesar Cipher Functions
def caesar_encrypt(plaintext, shift):
    encrypted_text = ""
    for char in plaintext:
        if char.isalpha():  # Check if character is a letter
            shift_base = ord('A') if char.isupper() else ord('a')
            encrypted_text += chr((ord(char) - shift_base + shift) % 26 + shift_base)
        else:
            encrypted_text += char  # Non-alphabet characters remain unchanged
    return encrypted_text

def caesar_decrypt(ciphertext, shift):
    return caesar_encrypt(ciphertext, -shift)  # Reuse encryption with negative shift for decryption

# Vigenère Cipher Functions
def vigenere_encrypt(plaintext, keyword):
    encrypted_text = ""
    keyword = keyword.lower()
    keyword_length = len(keyword)
    for i, char in enumerate(plaintext):
        if char.isalpha():
            shift = ord(keyword[i % keyword_length]) - ord('a')
            shift_base = ord('A') if char.isupper() else ord('a')
            encrypted_text += chr((ord(char) - shift_base + shift) % 26 + shift_base)
        else:
            encrypted_text += char  # Non-alphabet characters remain unchanged
    return encrypted_text

def vigenere_decrypt(ciphertext, keyword):
    decrypted_text = ""
    keyword = keyword.lower()
    keyword_length = len(keyword)
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            shift = ord(keyword[i % keyword_length]) - ord('a')
            shift_base = ord('A') if char.isupper() else ord('a')
            decrypted_text += chr((ord(char) - shift_base - shift) % 26 + shift_base)
        else:
            decrypted_text += char  # Non-alphabet characters remain unchanged
    return decrypted_text

# Frequency Analysis for Caesar Cipher
def frequency_analysis(text):
    # Count frequency of each letter and calculate percentage
    frequency = Counter(char.lower() for char in text if char.isalpha())
    total = sum(frequency.values())
    if total == 0:  # Avoid division by zero
        return frequency
    for letter in frequency:
        frequency[letter] /= total
    return frequency

# Example Usage
plaintext = "I AM NIMRA"
shift = 3
keyword = "KEY"

# Caesar Cipher Example
print("Original Text:", plaintext)
encrypted_caesar = caesar_encrypt(plaintext, shift)
print("Encrypted with Caesar:", encrypted_caesar)
decrypted_caesar = caesar_decrypt(encrypted_caesar, shift)
print("Decrypted with Caesar:", decrypted_caesar)

# Vigenère Cipher Example
encrypted_vigenere = vigenere_encrypt(plaintext, keyword)
print("Encrypted with Vigenere:", encrypted_vigenere)
decrypted_vigenere = vigenere_decrypt(encrypted_vigenere, keyword)
print("Decrypted with Vigenere:", decrypted_vigenere)

# Frequency Analysis
sample_text = "THIS IS A SAMPLE TEXT FOR FREQUENCY ANALYSIS"
print("\nFrequency Analysis of Sample Text:")
frequency = frequency_analysis(sample_text)
for char, freq in sorted(frequency.items()):
    print(f"{char}: {freq:.2%}")